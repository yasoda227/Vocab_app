{"version":3,"sources":["utils/helper.js","actions/word.js","middleware/index.js","components/Header.js","components/WordCard.js","components/WordDetail.js","components/AddWordModal.js","components/Words.js","components/Search.js","components/App.js","index.js","reducers/word.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","getAllWords","a","query","gql","result","data","words","addNewWord","word","mutate","mutation","addWord","console","log","handleInitialData","dispatch","then","type","receiveWords","applyMiddleware","thunk","Header","className","Typography","variant","to","IconButton","aria-label","color","MediaCard","props","Card","CardActionArea","onClick","handleClick","CardContent","gutterBottom","component","entries","map","entry","index","style","marginTop","key","partOfSpeech","definitions","Transition","React","forwardRef","ref","Slide","direction","WordDetail","Dialog","fullScreen","open","onClose","handleClose","TransitionComponent","edge","padding","Divider","origin","length","paddingLeft","fontSize","examples","example","AddWordModal","state","input","isDuplicate","loading","this","setState","some","e","handleAddWord","res","enqueueSnackbar","catch","aria-labelledby","DialogTitle","id","DialogContent","TextField","autoFocus","margin","label","onKeyUp","setInput","target","value","fullWidth","DialogActions","Button","CircularProgress","disabled","handleAddBtn","Component","connect","withSnackbar","Words","openDetailModal","openAddWordModal","modalData","prevState","wordName","filter","toggleModal","text","bind","toggleAddNewWordModal","Search","searchResult","debounce","expression","regex","RegExp","match","placeholder","onChange","theme","createMuiTheme","typography","fontFamily","App","ThemeProvider","anchorOrigin","vertical","horizontal","exact","path","store","createStore","action","middleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3cfcd42.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, gql } from '@apollo/client'\n\nconst serverUrl = 'http://localhost:5000/graphql'\n\nconst client = new ApolloClient({\n    uri: serverUrl,\n    cache: new InMemoryCache()\n})\n\nexport const getAllWords = async () => {\n    const result = await client\n        .query({\n            query: gql`\n            {\n                words{\n                    word\n                    entries{\n                        partOfSpeech\n                        origin\n                        definitions\n                        examples\n                    }\n                }\n            }`\n        })\n    return result.data.words\n}\n\nexport const addNewWord = async (word) => {\n    const result = await client\n        .mutate({\n            mutation: gql`\n            mutation{\n                addWord(word:\"${word}\"){\n                    word\n                    entries{\n                        partOfSpeech\n                        origin\n                        definitions\n                        examples\n                    }\n                }\n            }`\n        })\n    if (result.data.addWord.word === null) return false\n    console.log(result.data.addWord);\n    return result.data.addWord\n}","import { addNewWord, getAllWords } from '../utils/helper'\n\nexport const RECEIVE_WORDS = 'RECEIVE_WORDS'\nexport const ADD_NEW_WORD = 'ADD_NEW_WORD'\n\nexport const receiveWords = (words) => {\n    return {\n        type: RECEIVE_WORDS,\n        words\n    }\n}\n\nexport const addWord = (word) => {\n    return {\n        type: ADD_NEW_WORD,\n        word\n    }\n}\n\nexport const handleAddWord = (word) => {\n    return dispatch => {\n        return addNewWord(word)\n            .then(word => dispatch(addWord(word)))\n    }\n}\n\nexport const handleInitialData = (words) => {\n    return dispatch => {\n        return getAllWords()\n            .then(words => dispatch(receiveWords(words)))\n    }\n}","import thunk from 'redux-thunk'\nimport { applyMiddleware } from 'redux'\n\nexport default applyMiddleware(thunk)","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport SearchIcon from '@material-ui/icons/Search'\n\nexport default function Header() {\n    return (\n        <div className=\"header\">\n            <Typography className=\"logo\" variant=\"h6\">\n                Vocab\n            </Typography>\n            <Link to='/search'>\n                <IconButton aria-label=\"search\" color=\"inherit\">\n                    <SearchIcon />\n                </IconButton>\n            </Link>\n        </div>\n    )\n}","import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\n\nexport default function MediaCard(props) {\n    return (\n        <Card>\n            <CardActionArea onClick={props.handleClick}>\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {props.word.word}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">\n                        {props.word.entries && props.word.entries.map((entry, index) => (\n                            <p style={{ marginTop: 10 }} key={index}>({entry.partOfSpeech}) {entry.definitions[0]}</p>\n                        ))}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    )\n}\n","import React, { Fragment } from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Slide from '@material-ui/core/Slide'\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />\n})\n\nexport default function WordDetail(props) {\n    const { word } = props\n    return (\n        <Dialog fullScreen open={props.open} onClose={props.handleClose} TransitionComponent={Transition}>\n            <div className='closeBar'>\n                <IconButton edge=\"end\" color=\"inherit\" onClick={() => props.handleClose()} aria-label=\"close\">\n                    <CloseIcon />\n                </IconButton>\n            </div>\n            <div style={{ padding: '10px 20px' }}>\n                {word.word ? (\n                    <Fragment>\n                        <Typography variant=\"h3\" component=\"h2\">\n                            {word.word}\n                        </Typography>\n                        <Divider style={{ marginTop: 10 }} />\n                        {word.entries.map((entry, index) => (\n                            <div key={index} style={{ marginTop: 10 }}>\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"i\">\n                                    {entry.partOfSpeech}\n                                </Typography>\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                    {entry.origin.length !== 0 && (<span>Origin:</span>)} {entry.origin[0]}\n                                </Typography>\n                                <Typography variant=\"subtitle2\" style={{ marginTop: 10 }} component=\"p\">\n                                    {entry.definitions[0]}\n                                </Typography>\n                                <ul style={{ paddingLeft: 30, fontSize: '14px', marginTop: 10 }}>\n                                    {entry.examples.map((example, index) => (<li key={index}>{example}</li>))}\n                                </ul>\n                                <Divider style={{ marginTop: 10 }} />\n                            </div>\n                        ))}\n                    </Fragment>\n                ) : ''}\n            </div>\n        </Dialog>\n    )\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { withSnackbar } from 'notistack'\nimport { handleAddWord } from '../actions/word'\n\nclass AddWordModal extends Component {\n    state = {\n        input: '',\n        isDuplicate: false,\n        loading: false\n    }\n\n    setInput(input) {\n        this.setState({ input })\n        const isDuplicate = this.props.words.some(word => word.word === input)\n        if (isDuplicate) this.setState({ isDuplicate })\n        else this.setState({ isDuplicate })\n    }\n\n    handleAddBtn(e) {\n        if (this.state.input !== '') {\n            this.setState({ loading: true })\n            this.props.handleAddWord(this.state.input)\n                .then(res => {\n                    if (!res.word) this.props.enqueueSnackbar(\"Unable to add new word\")\n                    else this.props.enqueueSnackbar(\"New word is added to dictionary\")\n                    this.props.handleClose()\n                    this.setState({ loading: false })\n                })\n                .catch(() => this.props.enqueueSnackbar(\"Unable to add new word\"))\n        }\n    }\n\n    render() {\n        const { open, handleClose } = this.props\n        return (\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Add To Dictionary</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"word\"\n                        label=\"New Word\"\n                        type=\"Text\"\n                        onKeyUp={e => this.setInput(e.target.value)}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    {this.state.loading ?\n                        (<Button><CircularProgress color=\"secondary\" /></Button>) :\n                        (<Button disabled={this.state.isDuplicate} onClick={(e) => this.handleAddBtn(e)} color=\"primary\">\n                            Add\n                        </Button>)}\n                </DialogActions>\n            </Dialog >\n        )\n    }\n}\n\nconst mapStateToProps = (words) => {\n    return {\n        words\n    }\n}\n\nexport default connect(mapStateToProps, { handleAddWord })(withSnackbar(AddWordModal))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Divider from '@material-ui/core/Divider'\nimport AddIcon from '@material-ui/icons/Add'\nimport IconButton from '@material-ui/core/IconButton'\nimport WordCard from './WordCard'\nimport WordDetail from './WordDetail'\nimport AddWordModal from './AddWordModal'\nimport { handleInitialData } from '../actions/word'\n\nclass Words extends Component {\n    state = {\n        openDetailModal: false,\n        openAddWordModal: false,\n        modalData: {}\n    }\n\n    toggleAddNewWordModal() {\n        this.setState(prevState => ({\n            openAddWordModal: !prevState.openAddWordModal\n        }))\n    }\n\n    toggleModal() {\n        this.setState(prevState => ({\n            openDetailModal: !prevState.openDetailModal\n        }))\n    }\n\n    handleClick(wordName) {\n        const modalData = this.props.words.filter(word => word.word === wordName)[0]\n        console.log(modalData)\n        this.setState({ modalData })\n        this.toggleModal()\n    }\n\n    render() {\n        const { words } = this.props\n        const { openDetailModal, modalData, openAddWordModal } = this.state\n\n        return (\n            <div className=\"container\">\n                <h4 className=\"heading\">{this.props.text}</h4>\n                <Divider />\n                <div className=\"word-container\">\n                    {words.map(word => (\n                        <WordCard key={word.word} handleClick={() => this.handleClick(word.word)} word={word} />\n                    ))}\n                </div>\n                <WordDetail word={modalData} handleClose={this.toggleModal.bind(this)} open={openDetailModal} />\n                <AddWordModal handleClose={this.toggleAddNewWordModal.bind(this)} open={openAddWordModal} />\n                <div className=\"addBtn\">\n                    <IconButton onClick={() => this.toggleAddNewWordModal()} edge=\"end\" color=\"inherit\" aria-label=\"close\">\n                        <AddIcon />\n                    </IconButton>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (words) => {\n    return {\n        words\n    }\n}\n\nexport default connect(mapStateToProps, { handleInitialData })(Words)","import React, { Component, Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport Divider from '@material-ui/core/Divider'\nimport WordCard from './WordCard'\nimport WordDetail from './WordDetail'\nimport debounce from 'lodash.debounce'\nimport { handleInitialData } from '../actions/word'\n\nclass Search extends Component {\n    state = {\n        input: '',\n        searchResult: [],\n        openDetailModal: false,\n        modalData: {}\n    }\n\n    setInput = debounce((input) => {\n        this.setState({ input })\n        const expression = `.*${this.state.input}.*`\n        const regex = new RegExp(expression, \"g\");\n        const searchResult = this.props.words.filter(word => word.word.match(regex))\n        this.setState({ searchResult })\n        if (this.state.input === '') this.setState({ searchResult: [] })\n    }, 1000)\n\n    toggleModal() {\n        this.setState(prevState => ({\n            openDetailModal: !prevState.openDetailModal\n        }))\n    }\n\n    handleClick(wordName) {\n        const modalData = this.props.words.filter(word => word.word === wordName)[0]\n        console.log(modalData)\n        this.setState({ modalData })\n        this.toggleModal()\n    }\n\n    render() {\n        const words = this.state.searchResult\n        const { openDetailModal, modalData } = this.state\n\n        return (\n            <Fragment>\n                <div className=\"header\" >\n                    <input\n                        type=\"text\"\n                        className=\"searchInput\"\n                        placeholder=\"Search\"\n                        onChange={e => this.setInput(e.target.value)}\n                    />\n                    <Link to='/'>\n                        <IconButton aria-label=\"close\" color=\"inherit\">\n                            <CloseIcon />\n                        </IconButton>\n                    </Link>\n                </div>\n                <div className=\"container\">\n                    <h4 className=\"heading\">Search Result</h4>\n                    <Divider />\n                    <div className=\"word-container\">\n                        {words.map(word => (\n                            <WordCard key={word.word} handleClick={() => this.handleClick(word.word)} word={word} />\n                        ))}\n                    </div>\n                    <WordDetail word={modalData} handleClose={this.toggleModal.bind(this)} open={openDetailModal} />\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = (words, { props }) => {\n    return {\n        words\n    }\n}\n\nexport default connect(mapStateToProps, { handleInitialData })(Search)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport Header from './Header'\nimport Words from './Words'\nimport Search from './Search'\nimport { SnackbarProvider } from 'notistack'\nimport { handleInitialData } from '../actions/word'\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: \"'Kumbh Sans', sans-serif\",\n  }\n})\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.handleInitialData()\n  }\n\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <SnackbarProvider\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center',\n          }}\n        >\n          <BrowserRouter>\n            <Switch>\n              <Route exact path='/'>\n                <Header />\n                <Words text=\"Words List\" />\n              </Route>\n              <Route path='/search'>\n                <Search />\n              </Route>\n            </Switch>\n          </BrowserRouter>\n        </SnackbarProvider>\n      </ThemeProvider>\n    )\n  }\n}\n\nconst mapStateToProps = (words) => {\n  return {\n    words\n  }\n}\n\nexport default connect(mapStateToProps, { handleInitialData })(App)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducers/word'\nimport middleware from './middleware'\nimport App from './components/App'\n\nconst store = createStore(reducer, middleware)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n","import { ADD_NEW_WORD, RECEIVE_WORDS } from '../actions/word'\n\nexport default (state = [], action) => {\n    switch (action.type) {\n        case RECEIVE_WORDS:\n            return [\n                ...state,\n                ...action.words\n            ]\n        case ADD_NEW_WORD:\n            return [\n                ...state,\n                action.word\n            ]\n        default:\n            return state\n    }\n}"],"sourceRoot":""}